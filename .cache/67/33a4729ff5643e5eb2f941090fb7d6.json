{"id":"src/shapes/ShapeFactory.ts","dependencies":[{"name":"/Users/mattyp/Documents/Projects/drawer/tsconfig.json","includedInParent":true,"mtime":1745966208862},{"name":"/Users/mattyp/Documents/Projects/drawer/package.json","includedInParent":true,"mtime":1745966406557},{"name":"./Path","loc":{"line":1,"column":21,"index":21},"parent":"/Users/mattyp/Documents/Projects/drawer/src/shapes/ShapeFactory.ts","resolved":"/Users/mattyp/Documents/Projects/drawer/src/shapes/Path.ts"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createShapeFromData = createShapeFromData;\nvar _Path = require(\"./Path\");\n// Import other shapes and their serialized types...\nfunction createShapeFromData(data) {\n  switch (data.type) {\n    case 'path':\n      // Type assertion is often needed here after checking the 'type' property\n      return _Path.Path.deserialize(data);\n    // case 'line':\n    //      return Line.deserialize(data as SerializedLine);\n    // case 'rectangle':\n    //     return Rectangle.deserialize(data as SerializedRectangle);\n    // Add cases for other shape types...\n    default:\n      console.error('Unknown shape type during deserialization:', data.type);\n      return null;\n    // Or throw an error\n  }\n}"},"sourceMaps":{"js":{"mappings":[{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":7,"column":0}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":7,"column":4}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":7,"column":9}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":7,"column":12}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":7,"column":19}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":8,"column":0}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":6,"column":6},"generated":{"line":9,"column":0}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":6,"column":16},"generated":{"line":9,"column":9}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":6,"column":35},"generated":{"line":9,"column":28}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":6,"column":36},"generated":{"line":9,"column":29}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":6,"column":57},"generated":{"line":9,"column":33}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":6,"column":57},"generated":{"line":9,"column":35}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":7,"column":4},"generated":{"line":10,"column":2}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":7,"column":12},"generated":{"line":10,"column":10}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":7,"column":16},"generated":{"line":10,"column":14}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":7,"column":17},"generated":{"line":10,"column":15}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":7,"column":21},"generated":{"line":10,"column":19}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":8,"column":8},"generated":{"line":11,"column":4}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":8,"column":13},"generated":{"line":11,"column":9}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":8,"column":19},"generated":{"line":11,"column":15}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":9,"column":12},"generated":{"line":12,"column":6}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":10,"column":12},"generated":{"line":13,"column":6}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":10,"column":19},"generated":{"line":13,"column":13}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":10,"column":23},"generated":{"line":13,"column":23}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":10,"column":24},"generated":{"line":13,"column":24}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":10,"column":35},"generated":{"line":13,"column":35}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":10,"column":36},"generated":{"line":13,"column":36}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":10,"column":58},"generated":{"line":13,"column":40}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":10,"column":59},"generated":{"line":13,"column":41}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":11,"column":8},"generated":{"line":14,"column":4}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":12,"column":8},"generated":{"line":15,"column":4}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":13,"column":8},"generated":{"line":16,"column":4}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":14,"column":8},"generated":{"line":17,"column":4}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":15,"column":8},"generated":{"line":18,"column":4}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":16,"column":8},"generated":{"line":19,"column":4}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":17,"column":12},"generated":{"line":20,"column":6}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":17,"column":19},"generated":{"line":20,"column":13}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":17,"column":20},"generated":{"line":20,"column":14}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":17,"column":25},"generated":{"line":20,"column":19}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":17,"column":26},"generated":{"line":20,"column":20}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":17,"column":70},"generated":{"line":20,"column":64}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":17,"column":72},"generated":{"line":20,"column":66}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":17,"column":76},"generated":{"line":20,"column":70}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":17,"column":77},"generated":{"line":20,"column":71}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":17,"column":81},"generated":{"line":20,"column":75}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":17,"column":82},"generated":{"line":20,"column":76}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":18,"column":12},"generated":{"line":21,"column":6}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":18,"column":19},"generated":{"line":21,"column":13}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":18,"column":23},"generated":{"line":21,"column":17}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":18,"column":25},"generated":{"line":22,"column":4}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":19,"column":4},"generated":{"line":23,"column":2}},{"source":"src/shapes/ShapeFactory.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":24,"column":0}}],"sources":{"src/shapes/ShapeFactory.ts":"// src/shapes/ShapeFactory.ts\nimport { IShape, SerializedShape } from './IShape';\nimport { Path, SerializedPath } from './Path';\n// Import other shapes and their serialized types...\n\nexport function createShapeFromData(data: SerializedShape): IShape | null {\n    switch (data.type) {\n        case 'path':\n            // Type assertion is often needed here after checking the 'type' property\n            return Path.deserialize(data as SerializedPath);\n        // case 'line':\n        //      return Line.deserialize(data as SerializedLine);\n        // case 'rectangle':\n        //     return Rectangle.deserialize(data as SerializedRectangle);\n        // Add cases for other shape types...\n        default:\n            console.error('Unknown shape type during deserialization:', data.type);\n            return null; // Or throw an error\n    }\n}"},"lineCount":null}},"error":null,"hash":"8a46a72c43f587104ec9596c095fa45c","cacheData":{"env":{}}}